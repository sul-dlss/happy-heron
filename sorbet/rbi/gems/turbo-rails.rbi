# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/turbo-rails/all/turbo-rails.rbi
#
# turbo-rails-d89e1a0f3637

module Turbo
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.signed_stream_verifier; end
  def self.signed_stream_verifier_key; end
  def self.signed_stream_verifier_key=(arg0); end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
  extend ActiveSupport::Autoload
end
module Turbo::TestAssertions
  def assert_no_turbo_stream(action:, target: nil); end
  def assert_turbo_stream(action:, target: nil, status: nil, &block); end
  extend ActiveSupport::Concern
end
class Turbo::Engine < Rails::Engine
end
module Anonymous_Module_90
end
module Anonymous_Module_91
end
module Turbo::Broadcastable
  def broadcast_action(action, target: nil, **rendering); end
  def broadcast_action_later(action:, target: nil, **rendering); end
  def broadcast_action_later_to(*streamables, action:, target: nil, **rendering); end
  def broadcast_action_to(*streamables, action:, target: nil, **rendering); end
  def broadcast_after_to(*streamables, target:, **rendering); end
  def broadcast_append(target: nil, **rendering); end
  def broadcast_append_later(target: nil, **rendering); end
  def broadcast_append_later_to(*streamables, target: nil, **rendering); end
  def broadcast_append_to(*streamables, target: nil, **rendering); end
  def broadcast_before_to(*streamables, target:, **rendering); end
  def broadcast_prepend(target: nil, **rendering); end
  def broadcast_prepend_later(target: nil, **rendering); end
  def broadcast_prepend_later_to(*streamables, target: nil, **rendering); end
  def broadcast_prepend_to(*streamables, target: nil, **rendering); end
  def broadcast_remove; end
  def broadcast_remove_to(*streamables); end
  def broadcast_render_later(**rendering); end
  def broadcast_render_later_to(*streamables, **rendering); end
  def broadcast_rendering_with_defaults(options); end
  def broadcast_replace(**rendering); end
  def broadcast_replace_later(**rendering); end
  def broadcast_replace_later_to(*streamables, **rendering); end
  def broadcast_replace_to(*streamables, **rendering); end
  def broadcast_target_default; end
  extend ActiveSupport::Concern
end
module Turbo::Broadcastable::ClassMethods
  def broadcast_target_default; end
  def broadcasts(inserts_by: nil, target: nil); end
  def broadcasts_to(stream, inserts_by: nil, target: nil); end
end
module Turbo::Streams::TurboStreamsTagBuilder
  def turbo_stream; end
end
module Turbo::Frames::FrameRequest
  def turbo_frame_request?; end
  extend ActiveSupport::Concern
end
module Turbo::Native::Navigation
  def recede_or_redirect_back_or_to(url, **options); end
  def recede_or_redirect_to(url, **options); end
  def refresh_or_redirect_back_or_to(url, **options); end
  def refresh_or_redirect_to(url, **options); end
  def resume_or_redirect_back_or_to(url, **options); end
  def resume_or_redirect_to(url, **options); end
  def turbo_native_action_or_redirect(url, action, redirect_type, options = nil); end
  def turbo_native_app?; end
end
module Turbo::DriveHelper
  def turbo_exempts_page_from_cache; end
end
module Turbo::FramesHelper
  def turbo_frame_tag(id, src: nil, target: nil, **attributes, &block); end
end
module Turbo::IncludesHelper
  def turbo_include_tags; end
end
module Turbo::StreamsHelper
  def turbo_stream; end
  def turbo_stream_from(*streamables, **attributes); end
end
module Turbo::Streams::ActionHelper
  def convert_to_turbo_stream_dom_id(target); end
  def turbo_stream_action_tag(action, target:, template: nil); end
end
module Turbo::Streams::Broadcasts
  def broadcast_action_later_to(*streamables, action:, target:, **rendering); end
  def broadcast_action_to(*streamables, action:, target:, **rendering); end
  def broadcast_after_later_to(*streamables, target:, **rendering); end
  def broadcast_after_to(*streamables, target:, **rendering); end
  def broadcast_append_later_to(*streamables, target:, **rendering); end
  def broadcast_append_to(*streamables, target:, **rendering); end
  def broadcast_before_later_to(*streamables, target:, **rendering); end
  def broadcast_before_to(*streamables, target:, **rendering); end
  def broadcast_prepend_later_to(*streamables, target:, **rendering); end
  def broadcast_prepend_to(*streamables, target:, **rendering); end
  def broadcast_remove_to(*streamables, target:); end
  def broadcast_render_later_to(*streamables, **rendering); end
  def broadcast_render_to(*streamables, **rendering); end
  def broadcast_replace_later_to(*streamables, target:, **rendering); end
  def broadcast_replace_to(*streamables, target:, **rendering); end
  def broadcast_stream_to(*streamables, content:); end
  def render_format(format, **rendering); end
  include Turbo::Streams::ActionHelper
end
module Turbo::Streams::StreamName
  def signed_stream_name(streamables); end
  def stream_name_from(streamables); end
  def verified_stream_name(signed_stream_name); end
end
class Turbo::StreamsChannel < ActionCable::Channel::Base
  def subscribed; end
  extend Turbo::Streams::Broadcasts
end
class Turbo::Native::NavigationController < ActionController::Base
  def _layout(lookup_context, formats); end
  def _layout_from_proc; end
  def recede; end
  def refresh; end
  def resume; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_92
end
module Anonymous_Module_92
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_90
  extend Anonymous_Module_91
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_90
  include Anonymous_Module_91
end
class Turbo::Streams::BroadcastJob < ActiveJob::Base
  def perform(stream, **rendering); end
  def self.rescue_handlers; end
end
class Turbo::Streams::ActionBroadcastJob < ActiveJob::Base
  def perform(stream, action:, target:, **rendering); end
  def self.rescue_handlers; end
end
class Turbo::Streams::TagBuilder
  def action(name, target, content = nil, allow_inferred_rendering: nil, **rendering, &block); end
  def after(target, content = nil, **rendering, &block); end
  def append(target, content = nil, **rendering, &block); end
  def before(target, content = nil, **rendering, &block); end
  def extract_target_name_from(target); end
  def initialize(view_context); end
  def prepend(target, content = nil, **rendering, &block); end
  def remove(target); end
  def render_record(possible_record); end
  def replace(target, content = nil, **rendering, &block); end
  def update(target, content = nil, **rendering, &block); end
  include Turbo::Streams::ActionHelper
end
