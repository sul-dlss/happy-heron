# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/deprecation/all/deprecation.rbi
#
# deprecation-1.1.0

module Deprecation
  def debug; end
  def debug=(bool); end
  def debug?; end
  def deprecation_behavior; end
  def deprecation_behavior=(deprecation_behavior); end
  def deprecation_horizon; end
  def deprecation_horizon=(horizon); end
  def self.behaviors(klass); end
  def self.collect(context); end
  def self.default_deprecation_behavior; end
  def self.default_deprecation_behavior=(arg0); end
  def self.deprecate_methods(target_module, *method_names); end
  def self.deprecated_method_warning(context, method_name, options = nil); end
  def self.deprecation_behavior(context); end
  def self.deprecation_caller_message(callstack); end
  def self.deprecation_gem_root; end
  def self.deprecation_message(callstack, message = nil); end
  def self.deprecations; end
  def self.extract_callstack(callstack); end
  def self.logger; end
  def self.logger=(value); end
  def self.sanitized_callstack(callstack); end
  def self.show_full_callstack; end
  def self.show_full_callstack=(arg0); end
  def self.silence(context); end
  def self.warn(context, message = nil, callstack = nil); end
  def silenced; end
  def silenced=(bool); end
  def silenced?; end
  extend ActiveSupport::Concern
end
class Module
  def deprecation_deprecate(*method_names); end
end
class Deprecation::RSpec
  def self.report(io); end
end
