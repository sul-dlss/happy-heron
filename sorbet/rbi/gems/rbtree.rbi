# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rbtree/all/rbtree.rbi
#
# rbtree-0.4.4

class MultiRBTree < Data
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def _dump(arg0); end
  def bound(*arg0); end
  def clear; end
  def cmp_proc; end
  def default(*arg0); end
  def default=(arg0); end
  def default_proc; end
  def default_proc=(arg0); end
  def delete(arg0); end
  def delete_if; end
  def each; end
  def each_key; end
  def each_pair; end
  def each_value; end
  def empty?; end
  def fetch(*arg0); end
  def first; end
  def flatten(*arg0); end
  def has_key?(arg0); end
  def has_value?(arg0); end
  def include?(arg0); end
  def index(arg0); end
  def initialize(*arg0); end
  def initialize_copy(arg0); end
  def inspect; end
  def invert; end
  def keep_if; end
  def key(arg0); end
  def key?(arg0); end
  def keys; end
  def last; end
  def length; end
  def lower_bound(arg0); end
  def member?(arg0); end
  def merge!(arg0); end
  def merge(arg0); end
  def pop; end
  def pretty_print(arg0); end
  def pretty_print_cycle(arg0); end
  def readjust(*arg0); end
  def reject!; end
  def reject; end
  def replace(arg0); end
  def reverse_each; end
  def select!; end
  def select; end
  def self.[](*arg0); end
  def self._load(arg0); end
  def shift; end
  def size; end
  def store(arg0, arg1); end
  def to_a; end
  def to_h; end
  def to_hash; end
  def to_rbtree; end
  def to_s; end
  def update(arg0); end
  def upper_bound(arg0); end
  def value?(arg0); end
  def values; end
  def values_at(*arg0); end
end
