# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/patience_diff/all/patience_diff.rbi
#
# patience_diff-1.1.0

module PatienceDiff
end
class PatienceDiff::FormattingContext
  def files(left_file, right_file); end
  def format; end
  def initialize(differ, formatter); end
  def names; end
  def orphan(sequence, name = nil, timestamp = nil); end
  def sequences(left, right, left_name = nil, right_name = nil, left_timestamp = nil, right_timestamp = nil); end
  def title; end
end
class PatienceDiff::Formatter
  def format; end
  def initialize(differ, title = nil); end
  def left_header_line(name, timestamp); end
  def left_name; end
  def left_name=(arg0); end
  def left_timestamp; end
  def left_timestamp=(arg0); end
  def names; end
  def render_header(left_name = nil, right_name = nil, left_timestamp = nil, right_timestamp = nil); end
  def render_hunk(a, b, opcodes, last_line_shown); end
  def render_hunk_marker(opcodes); end
  def right_header_line(name, timestamp); end
  def right_name; end
  def right_name=(arg0); end
  def right_timestamp; end
  def right_timestamp=(arg0); end
  def title; end
  def title=(arg0); end
end
class PatienceDiff::SequenceMatcher
  def bisect(piles, target); end
  def collapse_matches(matches); end
  def context; end
  def context=(arg0); end
  def diff_opcodes(a, b); end
  def grouped_opcodes(a, b); end
  def initialize(opts = nil); end
  def longest_unique_subsequence(a, b); end
  def match(a, b); end
  def patience_sort(deck); end
  def recursively_match(a, b, a_lo, b_lo, a_hi, b_hi); end
end
class PatienceDiff::SequenceMatcher::Card < Struct
  def index; end
  def index=(_); end
  def previous; end
  def previous=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class PatienceDiff::Differ
  def all_context; end
  def all_context=(arg0); end
  def diff_files(left_file, right_file, formatter = nil); end
  def diff_sequences(left, right, left_name = nil, right_name = nil, left_timestamp = nil, right_timestamp = nil, formatter = nil); end
  def ignore_whitespace; end
  def ignore_whitespace=(arg0); end
  def initialize(opts = nil); end
  def line_ending; end
  def line_ending=(arg0); end
  def matcher; end
end
class PatienceDiff::UsageError < StandardError
end
