# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/reform-rails/all/reform-rails.rbi
#
# reform-rails-0.2.2

module Reform
end
module Reform::Rails
end
class Reform::Rails::Railtie < Rails::Railtie
  def active_model!; end
  def dry!(enable_am = nil); end
end
module Reform::Form::MultiParameterAttributes
  def deserialize!(params); end
end
class Reform::Form::MultiParameterAttributes::DateTimeParamsFilter
  def call(params); end
  def params_to_date(year, month, day, hour, minute); end
end
module Reform::Form::ActiveModel
  def model_name(*args); end
  def self.included(base); end
end
module Reform::Form::ActiveModel::FormBuilderMethods
  def deserialize!(params); end
  def rename_nested_param_for!(params, dfn); end
  def self.included(base); end
end
module Reform::Form::ActiveModel::FormBuilderMethods::ClassMethods
  def add_nested_attribute_compat(name); end
  def property(name, options = nil, &block); end
end
module Reform::Form::ActiveModel::ClassMethods
  def active_model_name_for(string, namespace = nil); end
  def model(main_model, options = nil); end
  def model_name; end
  def property(*arg0); end
  def self.extended(base); end
  def validate(*args, &block); end
  def validates(*args, &block); end
  def validates_each(*args, &block); end
  def validates_with(*args, &block); end
end
module Reform::Form::ActiveModel::ModelValidations
  def copy_validations_from(models); end
end
class Reform::Form::ActiveModel::ModelValidations::ValidationCopier
  def add_custom_validator(validator); end
  def add_native_validator(validator); end
  def add_validator(validator); end
  def copy; end
  def create_attributes(attributes); end
  def initialize(form_class, mapping, model, model_name = nil); end
  def inverse_map_attributes(attributes); end
  def self.copy(form_class, mapping, models); end
end
class Reform::Form::ActiveModel::ModelValidations::Mapping
  def add(from, to); end
  def forward(attr); end
  def forward_image(attrs); end
  def initialize; end
  def inverse(attr); end
  def inverse_image(attrs); end
  def self.from_representable_attrs(attrs); end
end
module Reform::Form::ActiveModel::Validations
  def custom_errors; end
  def errors(*args); end
  def initialize(*arg0); end
  def read_attribute_for_validation(name); end
  def self.included(includer); end
  def validate!(params, pointers = nil); end
end
class Reform::Form::ActiveModel::Validations::Group
  def call(form); end
  def initialize(*arg0); end
  extend Uber::Delegates
  include Anonymous_Module_71
end
module Anonymous_Module_71
  def validate(*args, &block); end
  def validate_with(*args, &block); end
  def validates(*args, &block); end
  def validates_each(*args, &block); end
  def validates_with(*args, &block); end
  extend Forwardable
end
class Reform::Form::ActiveModel::Validations::Result < Hash
  def errors; end
  def failure?; end
  def initialize(success, hash); end
  def messages; end
  def success?; end
end
class Reform::Form::ActiveModel::Validations::Result::ResultErrors < Reform::Contract::Result::Errors
  def [](k); end
  def add(key, error_text); end
  def empty?; end
  def full_messages; end
  def full_messages_for_nested_fields(form_fields); end
  def full_messages_for_twin(object); end
  def get_amv_errors(object); end
  def get_collection_errors(twin_collection); end
  def initialize(a, b, success, amv_errors); end
  def method_missing(m, *args, &block); end
  def respond_to?(method); end
  def to_s; end
end
class Reform::Form::ActiveModel::Validations::Validator < SimpleDelegator
  def __callbacks; end
  def __callbacks?; end
  def _run_validate_callbacks(&block); end
  def _validate_callbacks; end
  def _validators; end
  def _validators?; end
  def initialize(form); end
  def method_missing(m, *args, &block); end
  def model_name(**, &&); end
  def self.__callbacks; end
  def self.__callbacks=(value); end
  def self.__callbacks?; end
  def self._validate_callbacks; end
  def self._validate_callbacks=(value); end
  def self._validators; end
  def self._validators=(value); end
  def self._validators?; end
  def self.attr_reader(*arg0); end
  def self.attr_writer(*arg0); end
  def self.model_name; end
  def self.model_name=(name); end
  def self.validates(*args, &block); end
  def validation_context; end
  def validation_context=(arg0); end
  extend ActiveModel::Callbacks
  extend ActiveModel::Naming
  extend ActiveModel::Translation
  extend ActiveModel::Validations::ClassMethods
  extend ActiveModel::Validations::HelperMethods
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveModel::Validations
  include ActiveModel::Validations::HelperMethods
  include ActiveSupport::Callbacks
end
module Reform::Form::ORM
  def model_for_property(name); end
end
module Reform::Form::ORM::UniquenessValidator
  def validate(form); end
end
module Reform::Form::ActiveRecord
  def self.included(base); end
  def to_nested_hash(*arg0); end
end
module Reform::Form::ActiveRecord::ClassMethods
  def i18n_scope; end
  def validates_uniqueness_of(attribute, options = nil); end
end
class Reform::Form::ActiveRecord::UniquenessValidator < ActiveRecord::Validations::UniquenessValidator
  include Reform::Form::ORM::UniquenessValidator
end
class Reform::Form < Reform::Contract
end
module Reform::Form::ActiveModel::ModelReflections
  def column_for_attribute(name); end
  def defined_enums; end
  def has_attribute?(name); end
  def self.included(base); end
end
module Reform::Form::ActiveModel::ModelReflections::ClassMethods
  def reflect_on_association(*args); end
  def validators_on(*args); end
end
class Reform::Contract::Result
end
