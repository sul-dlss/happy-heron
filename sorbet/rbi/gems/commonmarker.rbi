# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/commonmarker/all/commonmarker.rbi
#
# commonmarker-0.22.0

module CommonMarker
  def self.extensions; end
  def self.render_doc(text, options = nil, extensions = nil); end
  def self.render_html(text, options = nil, extensions = nil); end
end
class CommonMarker::Node
  def _render_commonmark(*arg0); end
  def _render_html(arg0, arg1); end
  def _render_plaintext(*arg0); end
  def append_child(arg0); end
  def delete; end
  def each; end
  def each_child(&block); end
  def fence_info; end
  def fence_info=(arg0); end
  def first_child; end
  def header_level; end
  def header_level=(arg0); end
  def html_escape_href(arg0); end
  def html_escape_html(arg0); end
  def insert_after(arg0); end
  def insert_before(arg0); end
  def last_child; end
  def list_start; end
  def list_start=(arg0); end
  def list_tight; end
  def list_tight=(arg0); end
  def list_type; end
  def list_type=(arg0); end
  def next; end
  def parent; end
  def prepend_child(arg0); end
  def previous; end
  def self.markdown_to_html(arg0, arg1, arg2); end
  def self.new(arg0); end
  def self.parse_document(arg0, arg1, arg2, arg3); end
  def sourcepos; end
  def string_content; end
  def string_content=(arg0); end
  def table_alignments; end
  def tasklist_item_checked=(arg0); end
  def tasklist_item_checked?; end
  def tasklist_state; end
  def title; end
  def title=(arg0); end
  def to_commonmark(options = nil, width = nil); end
  def to_html(options = nil, extensions = nil); end
  def to_plaintext(options = nil, width = nil); end
  def type; end
  def type_string; end
  def url; end
  def url=(arg0); end
  def walk(&block); end
  include CommonMarker::Node::Inspect
  include Enumerable
end
module CommonMarker::Config
  def self.process_options(option, type); end
end
module CommonMarker::Node::Inspect
  def inspect; end
  def pretty_print(printer); end
end
class CommonMarker::Renderer
  def block; end
  def blocksep; end
  def code_block(node); end
  def container(starter, ender); end
  def containersep; end
  def cr; end
  def document(_node); end
  def escape_href(str); end
  def escape_html(str); end
  def in_plain; end
  def in_plain=(arg0); end
  def in_tight; end
  def in_tight=(arg0); end
  def initialize(options: nil, extensions: nil); end
  def option_enabled?(opt); end
  def out(*args); end
  def plain; end
  def reference_def(_node); end
  def render(node); end
  def sourcepos(node); end
  def tagfilter(str); end
  def warnings; end
  def warnings=(arg0); end
end
class CommonMarker::HtmlRenderer < CommonMarker::Renderer
  def blockquote(node); end
  def checked?(node); end
  def code(node); end
  def code_block(node); end
  def document(_); end
  def emph(_); end
  def footnote_definition(_); end
  def footnote_reference(node); end
  def header(node); end
  def hrule(node); end
  def html(node); end
  def image(node); end
  def inline_html(node); end
  def linebreak(_node); end
  def link(node); end
  def list(node); end
  def list_item(node); end
  def out_footnote_backref; end
  def paragraph(node); end
  def softbreak(_); end
  def strikethrough(_); end
  def strong(_); end
  def table(node); end
  def table_cell(node); end
  def table_header(node); end
  def table_row(node); end
  def tasklist(node); end
  def tasklist?(node); end
  def text(node); end
end
