# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/okcomputer/all/okcomputer.rbi
#
# okcomputer-1.18.4

module OkComputer
  def self.analytics_ignore; end
  def self.analytics_ignore=(arg0); end
  def self.authenticate(username_try, password_try); end
  def self.check_in_parallel; end
  def self.check_in_parallel=(arg0); end
  def self.logger; end
  def self.logger=(arg0); end
  def self.make_optional(checks); end
  def self.mount_at; end
  def self.mount_at=(arg0); end
  def self.options; end
  def self.options=(arg0); end
  def self.password; end
  def self.password=(arg0); end
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.require_authentication(username, password, options = nil); end
  def self.requires_authentication?(params = nil); end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
  def self.username; end
  def self.username=(arg0); end
  def self.whitelist; end
end
class OkComputer::Engine < Rails::Engine
end
class OkComputer::Check
  def <=>(check); end
  def check; end
  def clear; end
  def failure_occurred; end
  def failure_occurred=(arg0); end
  def mark_failure; end
  def mark_message(message); end
  def message; end
  def message=(arg0); end
  def registrant_name; end
  def registrant_name=(arg0); end
  def run; end
  def success?; end
  def time; end
  def time=(arg0); end
  def to_json(*args); end
  def to_text; end
  def with_benchmarking; end
end
class OkComputer::Check::CheckNotDefined < StandardError
end
class OkComputer::CheckCollection
  def <=>(check); end
  def [](key); end
  def check_in_parallel; end
  def check_in_sequence; end
  def check_names; end
  def checks; end
  def collection; end
  def collection=(arg0); end
  def deregister(name); end
  def display; end
  def display=(arg0); end
  def fetch(key, default = nil); end
  def initialize(display); end
  def keys; end
  def register(name, check); end
  def registrant_name; end
  def registrant_name=(arg0); end
  def run; end
  def self_and_sub_collections; end
  def sub_collections; end
  def success?; end
  def to_json(*args); end
  def to_text; end
  def values; end
end
class OkComputer::Registry
  def self.all; end
  def self.default_collection; end
  def self.deregister(check_name, collection_name = nil); end
  def self.fetch(name); end
  def self.find_collection(collection_name = nil); end
  def self.register(check_name, check_object, collection_name = nil); end
  def self.registry; end
end
class OkComputer::Registry::CheckNotFound < StandardError
end
class OkComputer::Registry::CollectionNotFound < StandardError
end
module OkComputer::LegacyRailsControllerSupport
  def render(options = nil, &block); end
  def self.included(base); end
end
class OkComputer::SizeThresholdCheck < OkComputer::Check
  def check; end
  def initialize(name, threshold, &size_proc); end
  def name; end
  def name=(arg0); end
  def size; end
  def size_proc; end
  def size_proc=(arg0); end
  def threshold; end
  def threshold=(arg0); end
end
class OkComputer::HttpCheck < OkComputer::Check
  def basic_auth_options; end
  def basic_auth_password; end
  def basic_auth_password=(arg0); end
  def basic_auth_username; end
  def basic_auth_username=(arg0); end
  def check; end
  def initialize(url, request_timeout = nil); end
  def parse_url(url); end
  def perform_request; end
  def request_timeout; end
  def request_timeout=(arg0); end
  def url; end
  def url=(arg0); end
end
class OkComputer::HttpCheck::ConnectionFailed < StandardError
end
class OkComputer::PingCheck < OkComputer::Check
  def check; end
  def host; end
  def host=(arg0); end
  def initialize(host, port, request_timeout = nil); end
  def port; end
  def port=(arg0); end
  def request_timeout; end
  def request_timeout=(arg0); end
  def tcp_socket_request; end
end
class OkComputer::PingCheck::ConnectionFailed < StandardError
end
class OkComputer::ActionMailerCheck < OkComputer::PingCheck
  def check; end
  def host; end
  def host=(arg0); end
  def initialize(klass = nil, timeout = nil); end
  def klass; end
  def klass=(arg0); end
  def port; end
  def port=(arg0); end
  def timeout; end
  def timeout=(arg0); end
end
class OkComputer::ActiveRecordCheck < OkComputer::Check
  def check; end
  def schema_version; end
end
class OkComputer::ActiveRecordCheck::ConnectionFailed < StandardError
end
class OkComputer::ActiveRecordMigrationsCheck < OkComputer::Check
  def check; end
  def needs_migration?; end
  def supported?; end
  def unsupported; end
end
class OkComputer::AppVersionCheck < OkComputer::Check
  def check; end
  def env; end
  def env=(arg0); end
  def file; end
  def file=(arg0); end
  def initialize(file: nil, env: nil, &transform); end
  def transform; end
  def transform=(arg0); end
  def version; end
  def version_from_env; end
  def version_from_file; end
end
class OkComputer::AppVersionCheck::UnknownRevision < StandardError
end
class OkComputer::CacheCheck < OkComputer::Check
  def check; end
  def host; end
  def host=(arg0); end
  def initialize(host = nil); end
  def stats; end
  def to_megabytes(bytes); end
end
class OkComputer::CacheCheck::ConnectionFailed < StandardError
end
class OkComputer::DefaultCheck < OkComputer::Check
  def check; end
end
class OkComputer::DelayedJobBackedUpCheck < OkComputer::SizeThresholdCheck
  def greater_than_priority; end
  def greater_than_priority=(arg0); end
  def include_errored; end
  def include_errored=(arg0); end
  def include_locked; end
  def include_locked=(arg0); end
  def initialize(priority, threshold, options = nil); end
  def priority; end
  def priority=(arg0); end
  def queue; end
  def queue=(arg0); end
  def size; end
  def threshold; end
  def threshold=(arg0); end
end
class OkComputer::DirectoryCheck < OkComputer::Check
  def check; end
  def directory; end
  def directory=(arg0); end
  def initialize(directory, writable = nil); end
  def writable; end
  def writable=(arg0); end
end
class OkComputer::DirectoryCheck::ConnectionFailed < StandardError
end
class OkComputer::GenericCacheCheck < OkComputer::Check
  def cache_key; end
  def check; end
  def humanize_cache_store_name; end
  def test_value; end
end
class OkComputer::ElasticsearchCheck < OkComputer::HttpCheck
  def check; end
  def cluster_health; end
  def host; end
  def initialize(host, request_timeout = nil); end
end
class OkComputer::MongoidCheck < OkComputer::Check
  def check; end
  def initialize(session = nil); end
  def mongodb_name; end
  def mongodb_stats; end
  def session; end
  def session=(arg0); end
end
class OkComputer::MongoidCheck::ConnectionFailed < StandardError
end
class OkComputer::Neo4jCheck < OkComputer::Check
  def check; end
end
class OkComputer::MongoidReplicaSetCheck < OkComputer::Check
  def check; end
  def initialize(session = nil); end
  def primary_status; end
  def refresh; end
  def secondary_status; end
  def session; end
  def session=(arg0); end
end
class OkComputer::MongoidReplicaSetCheck::ConnectionFailed < StandardError
end
class OkComputer::OptionalCheck < SimpleDelegator
  def success?; end
  def to_text; end
end
class OkComputer::RabbitmqCheck < OkComputer::Check
  def check; end
  def connection_status; end
  def initialize(url = nil); end
  def url; end
end
class OkComputer::RabbitmqCheck::ConnectionFailed < StandardError
end
class OkComputer::RedisCheck < OkComputer::Check
  def check; end
  def initialize(redis_config); end
  def redis; end
  def redis_config; end
  def redis_info; end
end
class OkComputer::RedisCheck::ConnectionFailed < StandardError
end
class OkComputer::ResqueBackedUpCheck < OkComputer::SizeThresholdCheck
  def initialize(queue, threshold); end
  def queue; end
  def queue=(arg0); end
  def size; end
  def threshold; end
  def threshold=(arg0); end
end
class OkComputer::ResqueDownCheck < OkComputer::Check
  def check; end
  def queued?; end
  def working?; end
end
class OkComputer::ResqueSchedulerCheck < OkComputer::Check
  def check; end
  def working?; end
end
class OkComputer::ResqueFailureThresholdCheck < OkComputer::SizeThresholdCheck
  def initialize(threshold); end
  def size; end
  def threshold; end
  def threshold=(arg0); end
end
class OkComputer::RubyVersionCheck < OkComputer::Check
  def check; end
end
class OkComputer::SequelCheck < OkComputer::Check
  def check; end
  def database; end
  def initialize(options = nil); end
  def is_current?; end
  def migration_directory; end
end
class OkComputer::SequelCheck::ConnectionFailed < StandardError
end
class OkComputer::SidekiqLatencyCheck < OkComputer::SizeThresholdCheck
  def initialize(queue, threshold = nil); end
  def queue; end
  def queue=(arg0); end
  def size; end
end
class OkComputer::SolrCheck < OkComputer::HttpCheck
  def check; end
  def host; end
  def initialize(host, request_timeout = nil); end
  def ping?; end
end
class OkComputer::OkComputerController < ActionController::Base
  def _layout(lookup_context, formats); end
  def _layout_from_proc; end
  def authenticate; end
  def index; end
  def respond(data, status); end
  def self.__callbacks; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def self.rescue_handlers; end
  def show; end
  def status_code(check); end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_81
end
