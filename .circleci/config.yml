version: 2.1
orbs:
  ruby-rails:
    orbs:
      docker: circleci/docker@2.0.1
      node: circleci/node@3.0
      ruby: circleci/ruby@1.2.0
      browser-tools: circleci/browser-tools@1.2.3
    references:
      ruby-version-ref: &ruby-version-ref '2.7.5'
      postgres-version-ref: &postgres-version-ref '11.13'
      ruby-executor-refs: &ruby-executor-refs
        image: 'cimg/ruby:<< parameters.ruby-tag >>-node'
        environment:
          BUNDLE_JOBS: '3'
          BUNDLE_RETRY: '3'
          RAILS_ENV: test
          PAGER: cat
          TZ: "America/Los_Angeles"
      postgres-executor-refs: &postgres-executor-refs
        image: 'cimg/postgres:<< parameters.postgres-tag >>'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: sekret
      ruby-tag-parameter-ref: &ruby-tag-parameter-ref
        default: *ruby-version-ref
        description: The `cimg/ruby` Docker image version tag.
        type: string
      postgres-tag-parameter-ref: &postgres-tag-parameter-ref
          default: *postgres-version-ref
          description: The `cimg/postgres` Docker image version tag.
          type: string
    executors:
      ruby:
        description: Ruby-only executor.
        parameters:
          ruby-tag:
            <<: *ruby-tag-parameter-ref
        docker:
          - <<: *ruby-executor-refs
      ruby-postgres:
        description: Ruby and postgres-only executor.
        parameters:
          ruby-tag:
            <<: *ruby-tag-parameter-ref
          postgres-tag:
            <<: *postgres-tag-parameter-ref
        docker:
          - <<: *ruby-executor-refs        
          - <<: *postgres-executor-refs
      ruby-postgres-redis:
        description: Ruby, postgres, and redis-only executor.
        parameters:
          ruby-tag:
            <<: *ruby-tag-parameter-ref
          postgres-tag:
            <<: *postgres-tag-parameter-ref
        docker:
          - <<: *ruby-executor-refs
          - <<: *postgres-executor-refs
          - image: circleci/redis:3
    commands:
      gem-install-deps:
        description: Install dependencies without using deployment mode (suitable for gems)
        steps:
          - run:
              name: Bundle Install
              command: bundle check || bundle install
      test:
        description: Runs rspec wrapped with code climate
        parameters:
          cc-test-reporter-id:
            default: CC_TEST_REPORTER_ID
            description: |
              Name of environment variable storing your Code Climate reporter test id
            type: env_var_name
        steps:
          - run:
              name: Setup Code Climate test-reporter
              command: |
                curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                chmod +x ./cc-test-reporter
                ./cc-test-reporter before-build
          - ruby/rspec-test
          - run:
              name: upload test coverage report to Code Climate
              command: ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $? -r $<< parameters.cc-test-reporter-id >>
      validate-api:
        description: Validate openapi specification
        steps:
          - run:
              name: Validate API specification
              command: |
                sudo npm install -g openapi-enforcer-cli
                result=$(openapi-enforcer validate openapi.yml)
                [[ $result =~ "Document is valid" ]] && {
                echo "Validation good"
                exit 0
                } || {
                echo $result
                exit 1
                }
    jobs:
      lint:
        parameters:
          executor:
            default: ruby
            description: Executor to use for this job, defaults to ruby executor
            type: executor
        executor: << parameters.executor >>
        steps:
          - checkout
          - gem-install-deps
          - ruby/rubocop-check
      test-gem:
        parameters:
          executor:
            default: ruby
            description: Executor to use for this job, defaults to ruby executor
            type: executor
          before-test:
            default: []
            description: Optional steps to run before running rspec
            type: steps
        executor: << parameters.executor >>
        parallelism: 3
        steps:
          - checkout
          - gem-install-deps
          - run:
              name: Install rspec_junit_formatter
              command: bundle add rspec_junit_formatter
          - when:
              condition: << parameters.before-test >>
              steps: << parameters.before-test >>
          - test
      test-rails:
        parameters:
          executor:
            default: ruby-postgres
            description: Executor to use for this job, defaults to ruby-postgres executor
            type: executor
          api-only:
            default: false
            description: True if this is an API only Rails app.
            type: boolean
          install-chrome:
            default: false
            description: True to install Chrome
            type: boolean
          db-prepare-command:
            default: db:test:prepare
            description: Database prepare command
            type: string
          before-test:
            default: []
            description: Optional steps to run before running rspec
            type: steps
        executor: << parameters.executor >>
        parallelism: 3
        steps:
          - checkout
          - ruby/install-deps
          - when:
              condition: << parameters.install-chrome >>
              steps:
                - browser-tools/install-chrome
          - unless:
              condition: << parameters.api-only >>
              steps:
                - node/install-packages:
                    pkg-manager: yarn
          - run:
              command: 'dockerize -wait tcp://localhost:5432 -timeout 1m'
              name: Wait for DB
          - run:
              name: Test prepare
              command: bin/rails << parameters.db-prepare-command >>
          - when:
              condition: << parameters.before-test >>
              steps: << parameters.before-test >>
          - test
      validate-api:
        description: Validate openapi specification
        executor: node/default
        steps:
          - checkout
          - validate-api
      docker-publish:
        description: Build and deploy a Docker image
        executor: docker/machine
        parameters:
          docker-password:
            default: DOCKER_PASS
            description: |
              Name of environment variable storing your Docker password
            type: env_var_name
          docker-username:
            default: DOCKER_USER
            description: |
              Name of environment variable storing your Docker username
            type: env_var_name
          dockerfile:
            default: Dockerfile
            description: 'Name of dockerfile to use, defaults to Dockerfile'
            type: string
          image:
            description: Name of image to build
            type: string
          tag:
            default: latest
            description: 'Comma-separated list of image tags, defaults to latest'
            type: string
        steps:
          - checkout
          - docker/check:
              docker-password: <<parameters.docker-password>>
              docker-username: <<parameters.docker-username>>
          - docker/build:
              dockerfile: <<parameters.dockerfile>>
              image: <<parameters.image>>
              tag: <<parameters.tag>>
          - docker/push:
              image: <<parameters.image>>
              tag: <<parameters.tag>>
workflows:
  build:
    jobs:
      - ruby-rails/lint:
          name: lint
      - ruby-rails/test-rails:
          name: test
          install-chrome: true
