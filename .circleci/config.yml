version: 2.1
orbs:
  ruby-rails:
    orbs:
      docker: circleci/docker@2.0.1
      node: circleci/node@3.0
      ruby: circleci/ruby@1.2.0
    commands:
      validate-api:
        description: Validate openapi specification
        steps:
          - run:
              name: Validate API specification
              command: |
                sudo npm install -g openapi-enforcer-cli
                result=$(openapi-enforcer validate openapi.yml)
                [[ $result =~ "Document is valid" ]] && {
                echo "Validation good"
                exit 0
                } || {
                echo $result
                exit 1
                }
    jobs:
      lint:
        parameters:
          ruby-tag:
            default: '2.7.5'
            description: The `cimg/ruby` Docker image version tag.
            type: string
        docker:
          - image: 'cimg/ruby:<< parameters.ruby-tag >>-node'
        steps:
          - checkout
          - ruby/install-deps
          - ruby/rubocop-check
      test:
        parameters:
          ruby-tag:
            default: '2.7.5'
            description: The `cimg/ruby` Docker image version tag.
            type: string
          postgres-tag:
            default: '11.13'
            description: The `cimg/postgres` Docker image version tag.
            type: string
          api-only:
            default: false
            description: True if this is an API only Rails app.
            type: boolean
        docker:
          - image: 'cimg/ruby:<< parameters.ruby-tag >>-browsers'
          - image: 'cimg/postgres:<< parameters.postgres-tag >>'
            environment:
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: sekret
        environment:
          BUNDLE_JOBS: '3'
          BUNDLE_RETRY: '3'
          PGHOST: 127.0.0.1
          PGPASSWORD: sekret
          PGUSER: circleci
          RAILS_ENV: test
          PAGER: cat
        parallelism: 3
        steps:
          - checkout
          - ruby/install-deps
          - unless:
              condition: << parameters.api-only >>
              steps:
                - node/install-packages:
                    pkg-manager: yarn
          - run:
              command: 'dockerize -wait tcp://localhost:5432 -timeout 1m'
              name: Wait for DB
          - run:
              name: Test prepare
              command: bin/rails db:test:prepare
          - run:
              name: Setup Code Climate test-reporter
              command: |
                curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                chmod +x ./cc-test-reporter
                ./cc-test-reporter before-build
          - ruby/rspec-test
          - run:
              name: upload test coverage report to Code Climate
              command: ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      validate-api:
        description: Validate openapi specification
        executor: node/default
        steps:
          - checkout
          - validate-api
      docker-publish:
        description: Build and deploy a Docker image
        executor: docker/machine
        parameters:
          docker-password:
            default: DOCKER_PASS
            description: |
              Name of environment variable storing your Docker password
            type: env_var_name
          docker-username:
            default: DOCKER_USER
            description: |
              Name of environment variable storing your Docker username
            type: env_var_name
          dockerfile:
            default: Dockerfile
            description: 'Name of dockerfile to use, defaults to Dockerfile'
            type: string
          image:
            description: Name of image to build
            type: string
          tag:
            default: latest
            description: 'Comma-separated list of image tags, defaults to latest'
            type: string
        steps:
          - checkout
          - docker/check:
              docker-password: <<parameters.docker-password>>
              docker-username: <<parameters.docker-username>>
          - docker/build:
              dockerfile: <<parameters.dockerfile>>
              image: <<parameters.image>>
              tag: <<parameters.tag>>
          - docker/push:
              image: <<parameters.image>>
              tag: <<parameters.tag>>
workflows:
  build:
    jobs:
      - ruby-rails/lint:
          name: lint
      - ruby-rails/test:
          name: test

# orbs:
#   node: circleci/node@4.1.0
#   ruby: circleci/ruby@1.1.4
#   browser-tools: circleci/browser-tools@1.1.3
# references:
#   default_ruby_version: &default_ruby_version 2.7-browsers
#   default_postgres_version: &default_postgres_version 13-ram
#   ruby_envs: &ruby_envs
#     environment:
#       BUNDLE_JOBS: 3
#       BUNDLE_RETRY: 3
#       PGHOST: 127.0.0.1
#       PGPASSWORD: sekret
#       RAILS_ENV: test
#       PAGER: cat # prevent psql commands using less
#   postgres_envs: &postgres_envs
#     environment:
#       POSTGRES_DB: test
#       POSTGRES_PASSWORD: sekret
# executors:
#   default:
#     parameters:
#       ruby_tag:
#         description: "The `cimg/ruby` Docker image version tag."
#         type: string
#         default: *default_ruby_version
#     docker:
#       - image: cimg/ruby:<< parameters.ruby_tag >>
#         <<: *ruby_envs
#   ruby_with_postgres:
#     parameters:
#       ruby_tag:
#         description: "The `cimg/ruby` Docker image version tag."
#         type: string
#         default: *default_ruby_version
#       postgres_tag:
#         description: "The `circleci/postgres` Docker image version tag."
#         type: string
#         default: *default_postgres_version
#     docker:
#       - image: cimg/ruby:<< parameters.ruby_tag >>
#         <<: *ruby_envs
#       - image: circleci/postgres:<< parameters.postgres_tag >>
#         <<: *postgres_envs
# jobs:
#   build:
#     executor: default
#     steps:
#       - checkout
#       - ruby/install-deps:
#           key: happy-heron-v2
#   checking:
#     executor: default
#     steps:
#       - checkout
#       - ruby/install-deps:
#           key: happy-heron-v2
#       - ruby/rubocop-check:
#           format: progress
#           label: Inspecting with Rubocop
#   test:
#     executor: ruby_with_postgres
#     steps:
#       - checkout
#       - ruby/install-deps:
#           key: happy-heron-v2
#       - browser-tools/install-chrome
#       - run:
#           name: Install psql
#           command: sudo apt update && sudo apt install -y postgresql-client
#       - run:
#           name: Wait for database
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bin/rails db:setup
#       - node/install-packages:
#           pkg-manager: yarn
#       - run:
#           name: Build assets
#           command: bin/rails assets:precompile
#       - run:
#           name: Install CodeClimate coverage reporter
#           command: |
#             curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
#             chmod +x ./cc-test-reporter
#       - run:
#           name: Run tests in parallel and calculate code coverage
#           command: |
#             ./cc-test-reporter before-build
#             bundle exec rspec --profile 10 \
#                               --format RspecJunitFormatter \
#                               --out test_results/rspec.xml \
#                               --format progress
#             ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
#       - store_test_results:
#           path: test_results
#       - store_artifacts:
#           path: tmp/capybara
# workflows:
#   version: 2
#   build:
#     jobs:
#       - build
#       - checking:
#           requires:
#             - build
#       - test:
#           requires:
#             - build
