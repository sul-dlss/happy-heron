import { Controller } from '@hotwired/stimulus'

const PURL_PLACE_HOLDER = ':link will be inserted here automatically when available:'
const DOI_PLACE_HOLDER = ':DOI will be inserted here automatically when available:'

export default class extends Controller {
  static targets = ['titleField', 'manual', 'auto', 'switch',
    'contributorFirst', 'contributorLast', 'contributorRole', 'contributorOrg',
    'embargoYear', 'embargo']

  connect () {
    this.purl = this.data.get('purl') || PURL_PLACE_HOLDER // Use a real purl on a persisted item or a placeholder
    this.doi = this.data.get('doi') || ''

    this.updateDisplay()

    // If the manualTarget is blank or the autoTarget matches the citation, then display the auto.
    const showAuto = this.enableAutoCitation()
    this.switchTarget.checked = showAuto
    this.displayDefault(showAuto)
  }

  // Populate the text area with the auto generated citation
  updateDisplay () {
    this.autoTarget.value = this.citation
  }

  enableAutoCitation () {
    if (this.manualTarget.value === '') { // The initial value
      return true
    } else {
      const manualValue = this.manualTarget.value.replace(PURL_PLACE_HOLDER, this.purl).replace(DOI_PLACE_HOLDER, this.doi)
      if (manualValue === this.autoTarget.value) {
        return true
      }
    }

    return false
  }

  get citation () {
    if (this.doi === '') {
      return `${this.authorAsSentence} (${this.date}). ${this.title}. Stanford Digital Repository. Available at ${this.purl}.`
    }

    return `${this.authorAsSentence} (${this.date}). ${this.title}. Stanford Digital Repository. Available at ${this.purl}. ${this.doi}`
  }

  get authorAsSentence () {
    switch (this.authors.length) {
      case 1:
      case 2:
        return this.authors.join(' and ')
      default:
        return `${this.authors.slice(0, -1).join(', ')}, and ${this.authors.slice(-1)}`
    }
  }

  // Authors (person and organization) as an array of strings.
  get authors () {
    return this.contributorRoles.map((roleField, index) => {
      if (roleField.attributes['data-contributors-target'].value === 'selectPersonRole') {
        const firstInitial = `${this.contributorFirsts[index].value.charAt(0)}.`
        const surname = this.contributorLasts[index].value
        return `${surname}, ${firstInitial}`
      }
      return this.contributorOrgNames[index].value
    })
  }

  get contributorRoles () {
    return this.contributorRoleTargets.filter(elem => elem.disabled === false)
  }

  get contributorOrgNames () {
    return this.contributorOrgTargets.filter(elem => elem.disabled === false)
  }

  get contributorFirsts () {
    return this.contributorFirstTargets.filter(elem => elem.disabled === false)
  }

  get contributorLasts () {
    return this.contributorLastTargets.filter(elem => elem.disabled === false)
  }

  // Triggered when the switch is toggled
  switchChanged (e) {
    this.displayDefault(e.target.checked)
  }

  // When true is passed, shows autogenerated, otherwise shows manual
  // It they switch back to autogenerated, clear out the manual field.
  displayDefault (showAutoGenerated) {
    this.manualTarget.hidden = showAutoGenerated
    this.autoTarget.hidden = !showAutoGenerated
    if (!showAutoGenerated) {
      if (this.manualTarget.value === '') {
        // Copy the auto-generated value to the manual field
        this.manualTarget.value = this.citation
      }
    } else if (this.manualTarget.value === this.citation) {
      // Clear the manual field if they didn't make changes, so the auto field
      // can change, and then copy into the manual field the next time they flip the switch
      this.manualTarget.value = ''
    }
  }

  get title () {
    return this.titleFieldTarget.value
  }

  get embargoYear () {
    if (this.hasEmbargoTarget && this.embargoTarget.checked) {
      return this.embargoYearTarget.value
    }
    return null
  }

  get date () {
    const date = new Date()
    if (this.embargoYear) {
      date.setYear(this.embargoYear)
    }
    return `${date.getFullYear()}`
  }
}
